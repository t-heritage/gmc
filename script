 <script>
document.addEventListener("DOMContentLoaded", function() {
  const memberstack = window.$memberstackDom;
  let isLoggedIn = false;
  let savedItems = [];
  let scheduledItems = {}; // Store item ID with date/time
  let completedItems = {}; // Store completed items with feedback
  let memberData = {}; // Store full member data
  let initializedElements = new Set(); // Track which elements already have listeners
  let currentCalendarDate = new Date(); // Current displayed month in calendar

  async function checkMemberLogin() {
    try {
      const member = await memberstack.getCurrentMember();
      return !!member;
    } catch (error) {
      return false;
    }
  }

  function processData(data) {
    return {
      savedItems: data.savedItems || [],
      scheduledItems: data.scheduledItems || {},
      completedItems: data.completedItems || {}
    };
  }

  function updateSaveButtonVisibility() {
    const saveButtons = document.querySelectorAll('[ms-code-save]');
    const unsaveButtons = document.querySelectorAll('[ms-code-unsave]');

    saveButtons.forEach(button => {
      const itemId = button.getAttribute('ms-code-save');
      button.style.display = !savedItems.includes(itemId) ? 'block' : 'none';
    });

    unsaveButtons.forEach(button => {
      const itemId = button.getAttribute('ms-code-unsave');
      button.style.display = savedItems.includes(itemId) ? 'block' : 'none';
    });
  }

  function updateScheduleButtonVisibility() {
    const scheduleButtons = document.querySelectorAll('[ms-code-schedule]');
    const unscheduleButtons = document.querySelectorAll('[ms-code-unschedule]');
    const doneButtons = document.querySelectorAll('[ms-code-done]');
    const dayTimeDisplays = document.querySelectorAll('[ms-code-schedule-day-time]');
    const dateDisplays = document.querySelectorAll('[ms-code-schedule-date]');

    scheduleButtons.forEach(button => {
      const itemId = button.getAttribute('ms-code-schedule');
      // Always show schedule button regardless of completion status
      button.style.display = !scheduledItems[itemId] ? 'block' : 'none';
    });

    unscheduleButtons.forEach(button => {
      const itemId = button.getAttribute('ms-code-unschedule');
      button.style.display = (scheduledItems[itemId]) ? 'block' : 'none';
    });
    
    doneButtons.forEach(button => {
      const itemId = button.getAttribute('ms-code-done');
      button.style.display = (scheduledItems[itemId]) ? 'block' : 'none';
    });
    
    // Update day and time displays
    dayTimeDisplays.forEach(display => {
      const itemId = display.getAttribute('ms-code-schedule-day-time');
      if (scheduledItems[itemId]) {
        display.style.display = 'block';
        const scheduledDate = new Date(scheduledItems[itemId]);
        display.textContent = formatDayTime(scheduledDate);
      } else {
        display.style.display = 'none';
      }
    });
    
    // Update full date displays
    dateDisplays.forEach(display => {
      const itemId = display.getAttribute('ms-code-schedule-date');
      if (scheduledItems[itemId]) {
        display.style.display = 'block';
        const scheduledDate = new Date(scheduledItems[itemId]);
        display.textContent = formatFullDate(scheduledDate);
      } else {
        display.style.display = 'none';
      }
    });
  }

  function formatDayTime(date) {
    // Format: Tuesday 4:30pm
    const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    const day = dayNames[date.getDay()];
    
    let hours = date.getHours();
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const ampm = hours >= 12 ? 'pm' : 'am';
    
    hours = hours % 12;
    hours = hours ? hours : 12; // Convert 0 to 12
    
    return `${day} ${hours}:${minutes}${ampm}`;
  }

  function formatFullDate(date) {
    // Format: April 22nd, 2025
    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    const month = monthNames[date.getMonth()];
    const day = date.getDate();
    const year = date.getFullYear();
    
    // Add ordinal suffix
    let suffix = 'th';
    if (day === 1 || day === 21 || day === 31) suffix = 'st';
    else if (day === 2 || day === 22) suffix = 'nd';
    else if (day === 3 || day === 23) suffix = 'rd';
    
    return `${month} ${day}${suffix}, ${year}`;
  }

  function updateSaveItemVisibility() {
  const saveLists = document.querySelectorAll('[ms-code-save-list]');
  saveLists.forEach(list => {
    const filter = list.getAttribute('ms-code-save-list');
    const items = list.querySelectorAll('[ms-code-save-item]');
    
    // Special handling for 'saved' filter
    if (filter === 'saved') {
      let hasVisibleItems = false;
      
      items.forEach(item => {
        const saveButton = item.querySelector('[ms-code-save]');
        if (!saveButton) {
          item.style.display = 'block';
          hasVisibleItems = true;
          return;
        }
        const itemId = saveButton.getAttribute('ms-code-save');
        
        if (savedItems.includes(itemId)) {
          item.style.display = 'block';
          hasVisibleItems = true;
        } else {
          item.style.display = 'none';
        }
      });
      
      // Show or hide the empty state
      const emptyStateElement = document.querySelector('[ms-code-empty-saved]');
      if (emptyStateElement) {
        emptyStateElement.style.display = hasVisibleItems ? 'none' : 'block';
      }
      
      // Hide the default empty state
      const defaultEmptyState = list.querySelector('.w-dyn-empty');
      if (defaultEmptyState) {
        defaultEmptyState.style.display = 'none';
      }
    } else {
      // Keep the original logic for other filters
      items.forEach(item => {
        const saveButton = item.querySelector('[ms-code-save]');
        if (!saveButton) {
          item.style.display = 'block';
          return;
        }
        const itemId = saveButton.getAttribute('ms-code-save');
        
        if (!isLoggedIn || filter === 'all') {
          item.style.display = 'block';
        } else if (filter === 'saved' && savedItems.includes(itemId)) {
          item.style.display = 'block';
        } else if (filter === 'unsaved' && !savedItems.includes(itemId)) {
          item.style.display = 'block';
        } else {
          item.style.display = 'none';
        }
      });
      
      // Handle empty state for other filters if needed
      const defaultEmptyState = list.querySelector('.w-dyn-empty');
      if (defaultEmptyState) {
        const hasVisibleItems = Array.from(items).some(item => item.style.display !== 'none');
        defaultEmptyState.style.display = hasVisibleItems ? 'none' : 'block';
      }
    }
  });
}

function updateScheduleItemVisibility() {
  const scheduleLists = document.querySelectorAll('[ms-code-schedule-list]');
  scheduleLists.forEach(list => {
    const filter = list.getAttribute('ms-code-schedule-list');
    
    // Special handling for 'completed' filter
    if (filter === 'completed') {
      // Get the template item to clone
      const templateItem = list.querySelector('[ms-code-schedule-item]');
      if (!templateItem) return;
      
      // Clear existing items first (except template)
      const existingItems = list.querySelectorAll('[ms-code-schedule-item]:not(:first-child)');
      existingItems.forEach(item => item.remove());
      
      // Hide the template item
      templateItem.style.display = 'none';
      
      let hasVisibleItems = false;
      
      // Iterate through completedItems and create duplicates as needed
      for (const itemId in completedItems) {
        const completionEntries = completedItems[itemId];
        
        // Make sure completionEntries is an array and has entries
        if (Array.isArray(completionEntries) && completionEntries.length > 0) {
          // For each completion entry, create a duplicate of the template
          completionEntries.forEach((completion, index) => {
            // Clone the template item
            const newItem = templateItem.cloneNode(true);
            newItem.setAttribute('data-completion-index', index);
            
            // Update item details
            const titleElement = newItem.querySelector('[ms-code-item-title]');
            if (titleElement) {
              const itemTitle = getItemNameBySlug(itemId);
              titleElement.textContent = itemTitle || "Completed Item";
            }
            
            // Add completion details
            const dateElement = newItem.querySelector('[ms-code-completion-date]');
            if (dateElement && completion.completedDate) {
              const completedDate = new Date(completion.completedDate);
              dateElement.textContent = formatFullDate(completedDate);
            }
            
            // Add rating display if available
            const ratingElement = newItem.querySelector('[ms-code-completion-rating]');
            if (ratingElement && completion.rating) {
              ratingElement.textContent = `${completion.rating} â˜…`;
            }
            
            // Add notes if available
            const notesElement = newItem.querySelector('[ms-code-completion-notes]');
            if (notesElement && completion.notes) {
              notesElement.textContent = completion.notes;
            }
            
            // Make the item visible
            newItem.style.display = 'block';
            
            // Add to list
            list.appendChild(newItem);
            hasVisibleItems = true;
          });
        }
      }
      
      // Show or hide the empty state
      const emptyStateElement = document.querySelector('[ms-code-empty-completed]');
      if (emptyStateElement) {
        emptyStateElement.style.display = hasVisibleItems ? 'none' : 'block';
      }
      
      // Hide the default empty state
      const defaultEmptyState = list.querySelector('.w-dyn-empty');
      if (defaultEmptyState) {
        defaultEmptyState.style.display = 'none';
      }
    } else {
      // For non-completed filters
      let hasVisibleItems = false;
      const items = list.querySelectorAll('[ms-code-schedule-item]');
      
      // Special handling for 'scheduled' filter
      if (filter === 'scheduled') {
        items.forEach(item => {
          // Get the item ID from the ms-code-schedule-item attribute
          const itemId = item.getAttribute('ms-code-schedule-item');
          
          // Only show the item if it's in scheduledItems
          if (itemId && scheduledItems[itemId]) {
            item.style.display = 'block';
            hasVisibleItems = true;
          } else {
            item.style.display = 'none';
          }
        });
        
        // Use custom empty state element for scheduled items
        const emptyStateElement = document.querySelector('[ms-code-empty-scheduled]');
        if (emptyStateElement) {
          emptyStateElement.style.display = hasVisibleItems ? 'none' : 'block';
        }
        
        // Hide the default empty state
        const defaultEmptyState = list.querySelector('.w-dyn-empty');
        if (defaultEmptyState) {
          defaultEmptyState.style.display = 'none';
        }
      } else {
        // Keep the original logic for other filters
        items.forEach(item => {
          const scheduleButton = item.querySelector('[ms-code-schedule]');
          if (!scheduleButton) {
            item.style.display = 'block';
            return;
          }
          const itemId = scheduleButton.getAttribute('ms-code-schedule');
          
          if (!isLoggedIn || filter === 'all') {
            item.style.display = 'block';
            hasVisibleItems = true;
          } else if (filter === 'scheduled' && scheduledItems[itemId]) {
            item.style.display = 'block';
            hasVisibleItems = true;
          } else if (filter === 'unscheduled' && !scheduledItems[itemId]) {
            item.style.display = 'block';
            hasVisibleItems = true;
          } else if (filter === 'upcoming' && scheduledItems[itemId] && new Date(scheduledItems[itemId]) > new Date()) {
            item.style.display = 'block';
            hasVisibleItems = true;
          } else if (filter === 'past' && scheduledItems[itemId] && new Date(scheduledItems[itemId]) <= new Date()) {
            item.style.display = 'block';
            hasVisibleItems = true;
          } else {
            item.style.display = 'none';
          }
        });
        
        // Handle empty state for other filters if needed
        const defaultEmptyState = list.querySelector('.w-dyn-empty');
        if (defaultEmptyState) {
          defaultEmptyState.style.display = hasVisibleItems ? 'none' : 'block';
        }
      }
    }
  });
}

      
      // Show or hide the empty state
      const emptyStateElement = document.querySelector('[ms-code-empty-completed]');
      if (emptyStateElement) {
        emptyStateElement.style.display = hasVisibleItems ? 'none' : 'block';
      }
      
      // Hide the default empty state
      const defaultEmptyState = list.querySelector('.w-dyn-empty');
      if (defaultEmptyState) {
        defaultEmptyState.style.display = 'none';
      }
    } else {
      // For non-completed filters
      let hasVisibleItems = false;
      const items = list.querySelectorAll('[ms-code-schedule-item]');
      
      // Special handling for 'scheduled' filter
      if (filter === 'scheduled') {
        items.forEach(item => {
          // Get the item ID from the ms-code-schedule-item attribute
          const itemId = item.getAttribute('ms-code-schedule-item');
          
          // Only show the item if it's in scheduledItems
          if (itemId && scheduledItems[itemId]) {
            item.style.display = 'block';
            hasVisibleItems = true;
          } else {
            item.style.display = 'none';
          }
        });
        
        // Use custom empty state element for scheduled items
        const emptyStateElement = document.querySelector('[ms-code-empty-scheduled]');
        if (emptyStateElement) {
          emptyStateElement.style.display = hasVisibleItems ? 'none' : 'block';
        }
        
        // Hide the default empty state
        const defaultEmptyState = list.querySelector('.w-dyn-empty');
        if (defaultEmptyState) {
          defaultEmptyState.style.display = 'none';
        }
      } else {
        // Keep the original logic for other filters
        items.forEach(item => {
          const scheduleButton = item.querySelector('[ms-code-schedule]');
          if (!scheduleButton) {
            item.style.display = 'block';
            return;
          }
          const itemId = scheduleButton.getAttribute('ms-code-schedule');
          
          if (!isLoggedIn || filter === 'all') {
            item.style.display = 'block';
            hasVisibleItems = true;
          } else if (filter === 'scheduled' && scheduledItems[itemId]) {
            item.style.display = 'block';
            hasVisibleItems = true;
          } else if (filter === 'unscheduled' && !scheduledItems[itemId]) {
            item.style.display = 'block';
            hasVisibleItems = true;
          } else if (filter === 'upcoming' && scheduledItems[itemId] && new Date(scheduledItems[itemId]) > new Date()) {
            item.style.display = 'block';
            hasVisibleItems = true;
          } else if (filter === 'past' && scheduledItems[itemId] && new Date(scheduledItems[itemId]) <= new Date()) {
            item.style.display = 'block';
            hasVisibleItems = true;
          } else if (filter === 'completed' && completedItems[itemId]) {
            item.style.display = 'block';
            hasVisibleItems = true;
          } else {
            item.style.display = 'none';
          }
        });
        
        // Handle empty state for other filters if needed
        const defaultEmptyState = list.querySelector('.w-dyn-empty');
        if (defaultEmptyState) {
          defaultEmptyState.style.display = hasVisibleItems ? 'none' : 'block';
        }
      }
    }
  });
}

  // Count items in each category
  function countItems() {
    // Count saved items
    const savedCount = savedItems.length;
    
    // Count scheduled items (only those not completed)
    let scheduledCount = 0;
    for (const itemId in scheduledItems) {
      scheduledCount++;
    }
    
    // Count completed items
    const completedCount = Object.keys(completedItems).length;
    
    return {
      saved: savedCount,
      scheduled: scheduledCount,
      completed: completedCount
    };
  }
  
  // Update counter displays
  function updateCounterDisplays() {
    const counts = countItems();
    
    // Update saved counter
    const savedCounters = document.querySelectorAll('[ms-code-count-saved]');
    savedCounters.forEach(counter => {
      counter.textContent = counts.saved;
    });
    
    // Update scheduled counter
    const scheduledCounters = document.querySelectorAll('[ms-code-count-scheduled]');
    scheduledCounters.forEach(counter => {
      counter.textContent = counts.scheduled;
    });
    
    // Update completed counter
    const completedCounters = document.querySelectorAll('[ms-code-count-completed]');
    completedCounters.forEach(counter => {
      counter.textContent = counts.completed;
    });
  }

  function updateAllVisibility() {
    updateSaveButtonVisibility();
    updateScheduleButtonVisibility();
    updateSaveItemVisibility();
    updateScheduleItemVisibility();
    updateCounterDisplays();
    updateCalendar(); // Update the calendar display
  }

  async function updateMemberStackData() {
    // Prepare the update data by merging saved arrays with existing data
    const updateData = {
      ...memberData,  // Keep all existing data
      savedItems: savedItems,
      scheduledItems: scheduledItems,
      completedItems: completedItems
    };
    
    try {
      await memberstack.updateMemberJSON({ json: updateData });
    } catch (error) {
      console.error("Error updating member data:", error);
    }
  }

  async function handleSaveButtonClick(event) {
    if (!isLoggedIn) return;

    // Stop event propagation to prevent it from affecting other elements
    event.stopPropagation();
    
    const button = event.currentTarget;
    const action = button.getAttribute('ms-code-save') ? 'save' : 'unsave';
    const itemId = button.getAttribute(action === 'save' ? 'ms-code-save' : 'ms-code-unsave');
    
    if (action === 'save' && !savedItems.includes(itemId)) {
      savedItems.push(itemId);
    } else if (action === 'unsave') {
      savedItems = savedItems.filter(id => id !== itemId);
    }

    await updateMemberStackData();
    updateAllVisibility();
  }

  // NEW FUNCTION: Get item name from hidden collection list by matching slug
  function getItemNameBySlug(slug) {
    if (!slug) return "Scheduled Item";
    
    // Find all elements with ms-item-name attribute
    const nameElements = document.querySelectorAll('[ms-item-name]');
    
    for (const element of nameElements) {
      const elementSlug = element.getAttribute('ms-item-name');
      
      // If the slug matches, return the element's text content
      if (elementSlug === slug) {
        return element.textContent.trim();
      }
    }
    
    // If no match is found, return default
    return "Scheduled Item";
  }

  function createCalendarPopup(itemId, itemTitle = "Item") {
    // Create the popup elements
    const overlay = document.createElement('div');
    overlay.className = 'ms-calendar-overlay';
    
    const container = document.createElement('div');
    container.className = 'ms-calendar-container';
    
    // Current date and time for default values
    const now = new Date();
    const dateString = now.toISOString().split('T')[0];
    const timeString = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;
    
    // Set minimum date to today
    const minDate = dateString;
    
    container.innerHTML = `
      <div class="ms-calendar-header">
        <div class="ms-calendar-title">Schedule "${itemTitle}"</div>
        <div class="ms-calendar-close">&times;</div>
      </div>
      <div class="ms-calendar-inputs">
        <input type="date" class="ms-calendar-date" min="${minDate}" value="${dateString}">
        <input type="time" class="ms-calendar-time" value="${timeString}">
      </div>
      <div class="ms-calendar-actions">
        <button class="ms-calendar-button ms-calendar-cancel">Cancel</button>
        <button class="ms-calendar-button ms-calendar-save">Schedule</button>
      </div>
    `;
    
    overlay.appendChild(container);
    document.body.appendChild(overlay);
    
    // Add event listeners
    const closeBtn = overlay.querySelector('.ms-calendar-close');
    const cancelBtn = overlay.querySelector('.ms-calendar-cancel');
    const saveBtn = overlay.querySelector('.ms-calendar-save');
    const dateInput = overlay.querySelector('.ms-calendar-date');
    const timeInput = overlay.querySelector('.ms-calendar-time');
    
    closeBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      document.body.removeChild(overlay);
    });
    
    cancelBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      document.body.removeChild(overlay);
    });
    
    saveBtn.addEventListener('click', async (e) => {
      e.stopPropagation();
      const selectedDate = dateInput.value;
      const selectedTime = timeInput.value;
      const dateTimeString = `${selectedDate}T${selectedTime}:00`;
      
      // Save the scheduled date
      scheduledItems[itemId] = dateTimeString;
      await updateMemberStackData();
      
      document.body.removeChild(overlay);
      updateAllVisibility();
    });
    
    // Prevent clicks inside the calendar from propagating to the overlay
    container.addEventListener('click', (e) => {
      e.stopPropagation();
    });
    
    // Close the calendar when clicking on the overlay outside the calendar
    overlay.addEventListener('click', (e) => {
      if (e.target === overlay) {
        document.body.removeChild(overlay);
      }
    });
  }

  function createFeedbackPopup(itemId, itemTitle = "Item") {
    // Create the popup elements
    const overlay = document.createElement('div');
    overlay.className = 'ms-feedback-overlay';
    
    const container = document.createElement('div');
    container.className = 'ms-feedback-container';
    
    container.innerHTML = `
      <div class="ms-feedback-header">
        <div class="ms-feedback-title">How did you go?</div>
        <div class="ms-feedback-close">&times;</div>
      </div>
      <div class="ms-feedback-form">
        <div class="ms-feedback-field">
          <label class="ms-feedback-label">How would you rate how this went with your community out of five?</label>
          <div class="ms-feedback-stars">
            <span class="ms-star" data-value="1">â˜…</span>
            <span class="ms-star" data-value="2">â˜…</span>
            <span class="ms-star" data-value="3">â˜…</span>
            <span class="ms-star" data-value="4">â˜…</span>
            <span class="ms-star" data-value="5">â˜…</span>
          </div>
        </div>
        <div class="ms-feedback-field">
          <label class="ms-feedback-label">Do you have any notes you'd like to remember in the future?</label>
          <textarea class="ms-feedback-textarea" id="ms-notes"></textarea>
        </div>
        <div class="ms-feedback-field">
          <label class="ms-feedback-label">Were there any moments that brought you unexpected joy in this process?</label>
          <textarea class="ms-feedback-textarea" id="ms-joy"></textarea>
        </div>
        <div class="ms-feedback-field">
          <label class="ms-feedback-label">What did your residents connect with most?</label>
          <textarea class="ms-feedback-textarea" id="ms-connection"></textarea>
        </div>
        <div class="ms-feedback-actions">
          <button class="ms-feedback-button ms-feedback-cancel">Cancel</button>
          <button class="ms-feedback-button ms-feedback-submit">Submit</button>
        </div>
      </div>
    `;
    
    overlay.appendChild(container);
    document.body.appendChild(overlay);
    
    // Add event listeners
    const closeBtn = overlay.querySelector('.ms-feedback-close');
    const cancelBtn = overlay.querySelector('.ms-feedback-cancel');
    const submitBtn = overlay.querySelector('.ms-feedback-submit');
    const stars = overlay.querySelectorAll('.ms-star');
    
    let selectedRating = 0;
    
    // Star rating functionality
    stars.forEach(star => {
      star.addEventListener('click', (e) => {
        e.stopPropagation();
        selectedRating = parseInt(star.getAttribute('data-value'));
        
        // Update stars visual
        stars.forEach(s => {
          if (parseInt(s.getAttribute('data-value')) <= selectedRating) {
            s.classList.add('active');
          } else {
            s.classList.remove('active');
          }
        });
      });
      
      // Hover effect
      star.addEventListener('mouseenter', () => {
        const value = parseInt(star.getAttribute('data-value'));
        stars.forEach(s => {
          if (parseInt(s.getAttribute('data-value')) <= value) {
            s.style.color = '#ffd700';
          }
        });
      });
      
      star.addEventListener('mouseleave', () => {
        stars.forEach(s => {
          if (!s.classList.contains('active')) {
            s.style.color = '#ddd';
          }
        });
      });
    });
    
    closeBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      document.body.removeChild(overlay);
    });
    
    cancelBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      document.body.removeChild(overlay);
    });
    
    submitBtn.addEventListener('click', async (e) => {
      e.stopPropagation();
      
      // Get form values
      const notes = overlay.querySelector('#ms-notes').value;
      const joy = overlay.querySelector('#ms-joy').value;
      const connection = overlay.querySelector('#ms-connection').value;
      
      // Create feedback object
      const feedback = {
        rating: selectedRating,
        notes: notes,
        joy: joy,
        connection: connection,
        completedDate: new Date().toISOString(),
        originalScheduledDate: scheduledItems[itemId] || null
      };
      
      // Store completed items in an array for each itemId if not already
      if (!completedItems[itemId]) {
        completedItems[itemId] = [];
      }
      
      // Add the new feedback to the array
      if (Array.isArray(completedItems[itemId])) {
        completedItems[itemId].push(feedback);
      } else {
        // Convert existing single feedback to array if needed
        completedItems[itemId] = [completedItems[itemId], feedback];
      }
      
      // Remove from scheduled items - user can schedule again
      delete scheduledItems[itemId];
      
      await updateMemberStackData();
      document.body.removeChild(overlay);
      updateAllVisibility();
    });
    
    // Prevent clicks inside the feedback form from propagating to the overlay
    container.addEventListener('click', (e) => {
      e.stopPropagation();
    });
    
    // Close the feedback form when clicking on the overlay outside the form
    overlay.addEventListener('click', (e) => {
      if (e.target === overlay) {
        document.body.removeChild(overlay);
      }
    });
  }

  async function handleScheduleButtonClick(event) {
    if (!isLoggedIn) return;

    // Stop event propagation
    event.stopPropagation();
    
    const button = event.currentTarget;
    const itemId = button.getAttribute('ms-code-schedule');
    
    if (itemId) {
      // Get the actual item name from the hidden collection using slug matching
      const itemTitle = getItemNameBySlug(itemId);
      
      createCalendarPopup(itemId, itemTitle);
    }
  }

  async function handleUnscheduleButtonClick(event) {
    if (!isLoggedIn) return;

    // Stop event propagation
    event.stopPropagation();
    
    const button = event.currentTarget;
    const itemId = button.getAttribute('ms-code-unschedule');
    
    if (itemId && scheduledItems[itemId]) {
      delete scheduledItems[itemId];
      await updateMemberStackData();
      updateAllVisibility();
    }
  }
  
  async function handleDoneButtonClick(event) {
    if (!isLoggedIn) return;

    // Stop event propagation
    event.stopPropagation();
    
    const button = event.currentTarget;
    const itemId = button.getAttribute('ms-code-done');
    
    if (itemId) {
      // Get the actual item name from the hidden collection using slug matching
      const itemTitle = getItemNameBySlug(itemId);
      
      createFeedbackPopup(itemId, itemTitle);
    }
  }

  // FIXED CALENDAR FUNCTIONS
  function getDaysInMonth(year, month) {
    return new Date(year, month + 1, 0).getDate();
  }
  
  function getFirstDayOfMonth(year, month) {
    return new Date(year, month, 1).getDay();
  }
  
  function getMonthName(month) {
    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    return monthNames[month];
  }
  
  function updateCalendar() {
    const calendar = document.querySelector('[ms-code-calendar]');
    if (!calendar) return;
    
    // Get calendar components
    const monthYearDisplay = calendar.querySelector('[ms-code-calendar-month-year]');
    const calendarGrid = calendar.querySelector('[ms-code-calendar-grid]');
    
    if (!monthYearDisplay || !calendarGrid) return;
    
    // Update month and year display
    const year = currentCalendarDate.getFullYear();
    const month = currentCalendarDate.getMonth();
    monthYearDisplay.textContent = `${getMonthName(month)} ${year}`;
    
    // Clear existing days
    calendarGrid.innerHTML = '';
    
    // Add day headers
    const dayHeaders = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    dayHeaders.forEach(day => {
      const dayHeader = document.createElement('div');
      dayHeader.className = 'calendar-day-header';
      dayHeader.textContent = day;
      calendarGrid.appendChild(dayHeader);
    });
    
    // Get days in month and first day of month
    const daysInMonth = getDaysInMonth(year, month);
    const firstDay = getFirstDayOfMonth(year, month);
    
    // Add empty cells for days before the first day of the month
    for (let i = 0; i < firstDay; i++) {
      const emptyDay = document.createElement('div');
      emptyDay.className = 'calendar-day empty';
      calendarGrid.appendChild(emptyDay);
    }
    
    // Add days of the month
    for (let day = 1; day <= daysInMonth; day++) {
      const dayEl = document.createElement('div');
      dayEl.className = 'calendar-day';
      dayEl.textContent = day;
      
      // Check if there are scheduled items on this day
      const currentDate = new Date(year, month, day);
      const hasScheduledItems = Object.values(scheduledItems).some(dateTimeStr => {
        const scheduledDate = new Date(dateTimeStr);
        return scheduledDate.getFullYear() === year &&
               scheduledDate.getMonth() === month &&
               scheduledDate.getDate() === day;
      });
      
      // Add indicator dot if there are scheduled items
      if (hasScheduledItems) {
        const dot = document.createElement('div');
        dot.className = 'calendar-event-dot';
        dayEl.appendChild(dot);
        dayEl.classList.add('has-events');
      }
      
      // Highlight today's date
      const today = new Date();
      if (today.getFullYear() === year &&
          today.getMonth() === month &&
          today.getDate() === day) {
        dayEl.classList.add('today');
      }
      
      // Make day clickable to view scheduled items
      // FIXED: Properly capture the day value using closure
      (function(selectedDay) {
        dayEl.addEventListener('click', function() {
          showScheduledItemsForDay(year, month, selectedDay);
        });
      })(day);
      
      calendarGrid.appendChild(dayEl);
    }
  }
  
function showScheduledItemsForDay(year, month, day) {
  // Find or create the daily schedule view
  let dailyView = document.querySelector('[ms-code-daily-schedule]');
  
  // If it doesn't exist, we need to create it
  if (!dailyView) {
    // First try to find a calendar element to place it after
    const calendar = document.querySelector('[ms-code-calendar]');
    if (calendar) {
      // Create the dailyView element
      dailyView = document.createElement('div');
      dailyView.setAttribute('ms-code-daily-schedule', '');
      dailyView.className = 'daily-schedule-view';
      
      // Insert it after the calendar
      if (calendar.parentNode) {
        calendar.parentNode.insertBefore(dailyView, calendar.nextSibling);
      } else {
        // Fallback to adding at the end of body if can't find parent
        document.body.appendChild(dailyView);
      }
    } else {
      // If no calendar element found, create it at the end of body
      dailyView = document.createElement('div');
      dailyView.setAttribute('ms-code-daily-schedule', '');
      dailyView.className = 'daily-schedule-view';
      document.body.appendChild(dailyView);
    }
  }
  
  // Clear the daily view
  dailyView.innerHTML = '';
  
  // Create the header for the daily view
  const header = document.createElement('div');
  header.className = 'daily-schedule-header';
  header.innerHTML = `<h3>${getMonthName(month)} ${day}, ${year}</h3>`;
  
  // Add a close button
  const closeBtn = document.createElement('button');
  closeBtn.className = 'daily-schedule-close';
  closeBtn.textContent = 'Ã—';
  closeBtn.addEventListener('click', () => {
    dailyView.style.display = 'none';
  });
  header.appendChild(closeBtn);
  
  dailyView.appendChild(header);
  
  // Find scheduled items for this day
  const startOfDay = new Date(year, month, day, 0, 0, 0);
  const endOfDay = new Date(year, month, day, 23, 59, 59);
  
  const scheduledItemsForDay = [];
  
  for (const itemId in scheduledItems) {
    const scheduledDate = new Date(scheduledItems[itemId]);
    if (scheduledDate >= startOfDay && scheduledDate <= endOfDay) {
      scheduledItemsForDay.push({
        id: itemId,
        date: scheduledDate
      });
    }
  }
  
  // Sort by time
  scheduledItemsForDay.sort((a, b) => a.date - b.date);
  
  // Create the list of scheduled items
  if (scheduledItemsForDay.length > 0) {
    const itemsList = document.createElement('div');
    itemsList.className = 'daily-schedule-items';
    
    scheduledItemsForDay.forEach(item => {
      const itemEl = document.createElement('div');
      itemEl.className = 'daily-schedule-item';
      
      // Format the time
      const hours = item.date.getHours();
      const minutes = String(item.date.getMinutes()).padStart(2, '0');
      const ampm = hours >= 12 ? 'pm' : 'am';
      const displayHours = hours % 12 || 12;
      
      // Get the actual item name from the hidden collection using slug matching
      const itemTitle = getItemNameBySlug(item.id);
      
      itemEl.innerHTML = `
        <div class="daily-schedule-time">${displayHours}:${minutes}${ampm}</div>
        <div class="daily-schedule-title">${itemTitle}</div>
        <div class="daily-schedule-actions">
          <button class="daily-schedule-unschedule" data-item-id="${item.id}">Unschedule</button>
          <button class="daily-schedule-done" data-item-id="${item.id}">Mark Done</button>
        </div>
      `;
      
      itemsList.appendChild(itemEl);
    });
    
    dailyView.appendChild(itemsList);
    
    // Add event listeners for unschedule and done buttons
    const unscheduleButtons = dailyView.querySelectorAll('.daily-schedule-unschedule');
    unscheduleButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        e.stopPropagation();
        const itemId = button.getAttribute('data-item-id');
        if (itemId && scheduledItems[itemId]) {
          delete scheduledItems[itemId];
          await updateMemberStackData();
          updateAllVisibility();
          
          // Update the daily view
          showScheduledItemsForDay(year, month, day);
        }
      });
    });
    
    const doneButtons = dailyView.querySelectorAll('.daily-schedule-done');
    doneButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        e.stopPropagation();
        const itemId = button.getAttribute('data-item-id');
        if (itemId) {
          // Get the item title from our helper function
          const itemTitle = getItemNameBySlug(itemId);
          
          createFeedbackPopup(itemId, itemTitle);
        }
      });
    });
  } else {
    // No scheduled items for this day
    const noItems = document.createElement('div');
    noItems.className = 'daily-schedule-no-items';
    noItems.textContent = 'No scheduled items for this day.';
    dailyView.appendChild(noItems);
  }
  
  // Ensure the daily view is visible
  dailyView.style.display = 'block';
}


  function addClickListeners() {
    // Save/unsave buttons - only add listeners to elements that don't have them yet
    const saveButtons = document.querySelectorAll('[ms-code-save]');
    const unsaveButtons = document.querySelectorAll('[ms-code-unsave]');
    
    saveButtons.forEach(button => {
      if (!initializedElements.has(button)) {
        button.addEventListener('click', handleSaveButtonClick);
        initializedElements.add(button);
      }
    });
    
    unsaveButtons.forEach(button => {
      if (!initializedElements.has(button)) {
        button.addEventListener('click', handleSaveButtonClick);
        initializedElements.add(button);
      }
    });

    // Schedule/unschedule buttons
    const scheduleButtons = document.querySelectorAll('[ms-code-schedule]');
    const unscheduleButtons = document.querySelectorAll('[ms-code-unschedule]');
    const doneButtons = document.querySelectorAll('[ms-code-done]');
    
    scheduleButtons.forEach(button => {
      if (!initializedElements.has(button)) {
        button.addEventListener('click', handleScheduleButtonClick);
        initializedElements.add(button);
      }
    });
    
    unscheduleButtons.forEach(button => {
      if (!initializedElements.has(button)) {
        button.addEventListener('click', handleUnscheduleButtonClick);
        initializedElements.add(button);
      }
    });
    
    doneButtons.forEach(button => {
      if (!initializedElements.has(button)) {
        button.addEventListener('click', handleDoneButtonClick);
        initializedElements.add(button);
      }
    });

    // Calendar navigation buttons
    const prevMonthBtn = document.querySelector('[ms-code-calendar-prev-month]');
    const nextMonthBtn = document.querySelector('[ms-code-calendar-next-month]');
    const todayBtn = document.querySelector('[ms-code-calendar-today]');
    
    if (prevMonthBtn && !initializedElements.has(prevMonthBtn)) {
      prevMonthBtn.addEventListener('click', () => {
        currentCalendarDate.setMonth(currentCalendarDate.getMonth() - 1);
        updateCalendar();
      });
      initializedElements.add(prevMonthBtn);
    }
    
    if (nextMonthBtn && !initializedElements.has(nextMonthBtn)) {
      nextMonthBtn.addEventListener('click', () => {
        currentCalendarDate.setMonth(currentCalendarDate.getMonth() + 1);
        updateCalendar();
      });
      initializedElements.add(nextMonthBtn);
    }
    
    if (todayBtn && !initializedElements.has(todayBtn)) {
      todayBtn.addEventListener('click', () => {
        currentCalendarDate = new Date();
        updateCalendar();
      });
      initializedElements.add(todayBtn);
    }
  }

  async function initializeScript() {
    isLoggedIn = await checkMemberLogin();

    if (isLoggedIn) {
      try {
        const result = await memberstack.getMemberJSON();
        memberData = result.data || {}; // Store complete member data
        const processedData = processData(memberData);
        savedItems = processedData.savedItems;
        scheduledItems = processedData.scheduledItems;
        completedItems = processedData.completedItems;
        
        // Ensure completedItems are in array format
        for (const itemId in completedItems) {
          if (!Array.isArray(completedItems[itemId])) {
            completedItems[itemId] = [completedItems[itemId]];
          }
        }
      } catch (error) {
        console.error("Error fetching member data:", error);
      }
    }

    // Add CSS for calendar
    addCalendarStyles();
    
    updateAllVisibility();
    addClickListeners();

    // Set up a MutationObserver to watch for changes in the DOM
    const observer = new MutationObserver((mutations) => {
      let shouldUpdate = false;
      
      mutations.forEach((mutation) => {
        // Only process if new nodes were added
        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
          // Check if any of the added nodes contain our special attributes
          mutation.addedNodes.forEach(node => {
            if (node.nodeType === 1) { // Element node
              if (node.querySelector && (
                  node.querySelector('[ms-code-save]') || 
                  node.querySelector('[ms-code-unsave]') ||
                  node.querySelector('[ms-code-schedule]') ||
                  node.querySelector('[ms-code-unschedule]') ||
                  node.querySelector('[ms-code-done]') ||
                  node.querySelector('[ms-code-count-saved]') ||
                  node.querySelector('[ms-code-count-scheduled]') ||
                  node.querySelector('[ms-code-count-completed]') ||
                  node.querySelector('[ms-code-empty-scheduled]') ||
                  node.querySelector('[ms-code-empty-completed]') ||
                  node.querySelector('[ms-code-calendar]')
                )) {
                shouldUpdate = true;
              }
            }
          });
        }
      });
      
      if (shouldUpdate) {
        updateAllVisibility();
        addClickListeners();
      }
    });

    // Configure observer: expanded to include our calendar elements
    const observerConfig = { 
      childList: true, 
      subtree: true,
      attributes: true,
      attributeFilter: [
        'ms-code-save', 
        'ms-code-unsave', 
        'ms-code-schedule', 
        'ms-code-unschedule', 
        'ms-code-done',
        'ms-code-count-saved',
        'ms-code-count-scheduled',
        'ms-code-count-completed',
        'ms-code-empty-scheduled',
        'ms-code-empty-completed',
        'ms-code-calendar',
        'ms-code-calendar-month-year',
        'ms-code-calendar-grid',
        'ms-code-calendar-prev-month',
        'ms-code-calendar-next-month',
        'ms-code-calendar-today',
        'ms-code-daily-schedule'
      ]
    };

    // Start observing the document with the configured parameters
    observer.observe(document.body, observerConfig);
  }


function addCalendarStyles() {
  // Create a style element
  const styleEl = document.createElement('style');
  styleEl.textContent = `
    /* Calendar Container */
    [ms-code-calendar] {
      font-family: inherit;
      width: 100%;
      max-width: 800px;
      margin: 0 auto;
      border-radius: 2rem;
      overflow: hidden;
    }
    
    /* Calendar Header */
    .calendar-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 30px;
      background: #FCE2EC;
      border-bottom: 1px solid #FCE2EC;
    }
    
    [ms-code-calendar-month-year] {
      font-size: 36px;
      font-weight: 600;
    }
    
    .calendar-nav {
      background: #FFFFFF;
      display: flex;
      padding: 30px;
      gap: 30px;
    }
    
    [ms-code-calendar-prev-month],
    [ms-code-calendar-next-month],
    [ms-code-calendar-today] {
      background: #68B684;
      border: 1px solid #ddd;
      border-radius: 100px;
      padding: 5px 10px;
      cursor: pointer;
      transition: all 0.2s;
    }
    
    [ms-code-calendar-prev-month]:hover,
    [ms-code-calendar-next-month]:hover,
    [ms-code-calendar-today]:hover {
      background: #CF5C35;
border: 1px solid #CF5C35;

    }
    
    /* Calendar Grid */
    [ms-code-calendar-grid] {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      gap: 0px;
      background: #fff;
    }
    
    .calendar-day-header {
      text-align: center;
      font-weight: 600;
      padding: 10px;
      background: #EFB3D2;
    }
    
    .calendar-day {
      position: relative;
      height: 50px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      border-radius: 4px;
      transition: background 0.2s;
    }
    
    .calendar-day:hover {
      background: #FEF7F9;
    }
    
    .calendar-day.empty {
      cursor: default;
    }
    
    .calendar-day.today {
      background: #FEF7F9;
      font-weight: bold;
    }
    
    .calendar-day.has-events {
      font-weight: 600;
    }
    
    .calendar-event-dot {
      position: absolute;
      bottom: 5px;
      left: 50%;
      transform: translateX(-50%);
      width: 6px;
      height: 6px;
      background: #EFB3D2;
      border-radius: 50%;
    }
    
    /* Daily Schedule View */
    [ms-code-daily-schedule] {
      display: none;
      margin-top: 20px;
      border: 1px solid #FCE2EC;
      border-radius: 2rem;
      overflow: hidden;
    }
    
    .daily-schedule-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding-right: 30px;
      padding-left: 30px;
      padding-top: 20px;
      padding-bottom: 20px;
      background: #EFB3D2;
      border-bottom: 1px solid #EFB3D2;
    }
    
    .daily-schedule-header h3 {
      margin: 0;
      font-size: 16px;
    }
    
    .daily-schedule-close {
      background: none;
      border: none;
      font-size: 20px;
      cursor: pointer;
      color: #888;
    }
    
    .daily-schedule-items {
      padding: 10px;
    }
    
    .daily-schedule-no-items {
      padding: 20px;
      text-align: center;
      color: #888;
    }
    
    .daily-schedule-item {
      display: flex;
      align-items: center;
      padding: 10px;
      border-bottom: 1px solid #eaeaea;
    }
    
    .daily-schedule-item:last-child {
      border-bottom: none;
    }
    
    .daily-schedule-time {
      font-weight: 600;
      min-width: 80px;
    }
    
    .daily-schedule-title {
      flex: 1;
    }
    
    .daily-schedule-actions {
      display: flex;
      gap: 5px;
    }
    
    .daily-schedule-unschedule,
    .daily-schedule-done {
      background: none;
      border: 1px solid #FCE2EC;
      border-radius: 1rem;
      padding: 5px 10px;
      cursor: pointer;
      font-size: 12px;
    }
    
    .daily-schedule-done {
      background: #68B684;
      color: white;
      border-color: #68B684;
    }
    
    .daily-schedule-unschedule:hover {
      background: #FCE2EC;
    }
    
    .daily-schedule-done:hover {
      background: #FCE2EC;
    }

    /* Calendar Overlay Styles */
    .ms-calendar-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }
    
    .ms-calendar-container {
      background: white;
      border-radius: 2rem;
      max-width: 500px;
      width: 90%;
    }

    /* Feedback Popup Styles */
    .ms-feedback-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }
    
    .ms-feedback-container {
      background: white;
      border-radius: 8px;
      max-width: 600px;
      width: 90%;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      max-height: 90vh;
      overflow-y: auto;
    }
    
    .ms-feedback-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 15px 20px;
      background: #EFB3D2;
      border-bottom: 1px solid #eaeaea;
    }
    
    .ms-feedback-title {
      font-weight: 600;
      font-size: 18px;
    }
    
    .ms-feedback-close {
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
      line-height: 1;
    }
    
    .ms-feedback-form {
      padding: 20px;
    }
    
    .ms-feedback-field {
      margin-bottom: 20px;
    }
    
    .ms-feedback-label {
      display: block;
      margin-bottom: 8px;
      font-weight: 500;
    }
    
    .ms-feedback-stars {
      display: flex;
      gap: 5px;
      font-size: 24px;
      margin-bottom: 10px;
    }
    
    .ms-star {
      color: #ddd;
      cursor: pointer;
      transition: color 0.2s;
    }
    
    .ms-star.active {
      color: #ffd700;
    }
    
    .ms-feedback-textarea {
      width: 100%;
      min-height: 80px;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-family: inherit;
      resize: vertical;
    }
    
    .ms-feedback-actions {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
      margin-top: 20px;
    }
    
    .ms-feedback-button {
      padding: 8px 16px;
      border-radius: 2rem;
      cursor: pointer;
      font-weight: 500;
    }
    
    .ms-feedback-cancel {
      background: #f3f3f3;
      border: 1px solid #ddd;
    }
    
    .ms-feedback-submit {
      background: #68B684;
      color: white;
      border: 1px solid #68B684;
    }
    
    .ms-feedback-submit:hover {
      background: #45a049;
    }

    /* Calendar Inputs and Button Styles */
    .ms-calendar-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 15px 20px;
      background: #EFB3D2;
      border-bottom: 1px solid #eaeaea;
    }
    
    .ms-calendar-title {
      font-weight: 600;
      font-size: 18px;
    }
    
    .ms-calendar-close {
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
      line-height: 1;
    }
    
    .ms-calendar-inputs {
      padding: 20px;
    }
    
    .ms-calendar-date,
    .ms-calendar-time {
      width: 100%;
      padding: 8px;
      margin-bottom: 15px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    
    .ms-calendar-actions {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
      padding: 0 20px 20px;
    }
    
    .ms-calendar-button {
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
      font-weight: 500;
    }
    
    .ms-calendar-cancel {
      background: #f3f3f3;
      border: 1px solid #ddd;
    }
    
    .ms-calendar-save {
      background: #68B684;
      color: white;
      border: 1px solid #68B684;
    }
    
    .ms-calendar-save:hover {
      background: #45a049;
    }
  `;
  
  // Append the style element to the document head
  document.head.appendChild(styleEl);
}

  initializeScript();
});
</script>
